from typing import Dict, List, Optional, Union, Callable


class AliasGraph:
    alias: Dict[str, int]
    reverse_alias: Dict[int, str]
    next_id: int

    def __init__(self, filepath: str) -> None: ...

    def get_id(self, name: str) -> Optional[int]: ...

    def get_name(self, node_id: int) -> Optional[str]: ...

    def add_edge(self, u: Union[str, int], v: Union[str, int], weight: int = ...) -> Dict: ...

    def batch_edges(self, lines: List[Dict[str, Union[str, int]]]) -> Dict: ...

    def degree(self, node: Union[str, int]) -> Dict: ...

    def stats(self) -> Dict: ...

    def isolated(self) -> List[str]: ...

    def triangle_count(self) -> int: ...

    def shortest_path(self, start: Union[str, int], unreachable_marker: Optional[int] = ...) -> List[Optional[str]]: ...

    def centrality(self) -> Dict[str, float]: ...

    def out_nodes(self, node: Union[str, int]) -> List[str]: ...

    def in_nodes(self, node: Union[str, int]) -> List[str]: ...

    def neighbours(self, node: Union[str, int]) -> List[str]: ...
